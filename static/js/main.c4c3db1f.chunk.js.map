{"version":3,"sources":["components/RoomList.js","components/Message.js","components/MessageList.js","components/SendMessageForm.js","components/NewRoomForm.js","App.js","config.js","serviceWorker.js","index.js"],"names":["RoomList","_this","this","orderedRooms","Object","toConsumableArray","props","rooms","sort","a","b","id","react_default","createElement","className","map","room","active","roomId","key","onClick","subscribeToRoom","href","name","React","Component","Message","console","log","username","text","MessageList","node","ReactDOM","findDOMNode","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","messages","message","index","components_Message","senderId","SendMessageForm","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","textMessage","handleChange","bind","assertThisInitialized","handleSubmit","event","_event$target","target","value","setState","defineProperty","preventDefault","sendMessage","onSubmit","disabled","placeholder","type","onChange","NewRoomForm","roomName","createRoom","required","App","joinableRooms","joinedRooms","getRooms","_this2","ChatKit","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","catch","err","_this3","getJoinableRooms","_this4","messageLimit","hooks","onMessage","concat","_this5","components_RoomList","components_MessageList","components_SendMessageForm","components_NewRoomForm","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4c3db1f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass RoomList extends React.Component {\r\n    \r\n    render(){\r\n        const orderedRooms = [...this.props.rooms].sort((a, b) => a.id - b.id)\r\n        \r\n        return (\r\n            <div className=\"rooms-list\">\r\n                <ul>\r\n                    <h3>Your rooms:</h3>\r\n                    {orderedRooms.map(room => {\r\n                        const active = this.props.roomId === room.id ? \"active\": \"\";\r\n                        return (\r\n                            <li key={room.id} className={\"room\" + active}>\r\n                                <a onClick={()=>this.props.subscribeToRoom(room.id)} href=\"#\"># {room.name} </a>\r\n                            </li>\r\n                        )\r\n                    })}\r\n\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default RoomList","import React from 'react'\r\n\r\nfunction Message (props) {\r\n    console.log(props)\r\n    return (\r\n        <div className=\"message\">\r\n            <div className=\"message-username\">{props.username}</div>\r\n            <div className=\"message-text\">{props.text}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Message from './Message'\r\n\r\n\r\nclass MessageList extends React.Component {\r\n\r\n    componentWillUpdate() {\r\n        const node = ReactDOM.findDOMNode(this)\r\n        /* \r\n        scrollTop: how far we've scrolled \r\n        clientHeight: height of window\r\n        scrollHeight: height of entire element(message list)\r\n        */\r\n        // console.log(node.scrollTop,node.clientHeight,node.scrollHeight)\r\n        this.shouldScrollToBottom = node.scrollTop + node.clientHeight + 100 >= node.scrollHeight\r\n    }\r\n    componentDidUpdate() {\r\n        if(this.shouldScrollToBottom) {\r\n            const node = ReactDOM.findDOMNode(this)\r\n            node.scrollTop = node.scrollHeight\r\n        }\r\n       \r\n    }\r\n    render() {\r\n\r\n        if(!this.props.roomId) {\r\n            return (\r\n                <div className=\"message-list\">\r\n                    <div className=\"join-room\">\r\n                        &larr; Join a room!\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div className=\"message-list\">\r\n                {this.props.messages.map((message, index) => {\r\n                    return (\r\n                        <Message key={index} username={message.senderId} text= {message.text}/>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageList","import React from 'react'\r\n\r\nclass SendMessageForm extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            textMessage: \"\"\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n    handleChange(event) {\r\n        const {name, value} = event.target\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n        \r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        // console.log(this.state.textMessage)\r\n        this.props.sendMessage(this.state.textMessage)\r\n        this.setState({\r\n            textMessage: ''\r\n        })\r\n    }\r\n    render() {\r\n        // console.log(this.state.textMessage)\r\n        return (\r\n            <form \r\n                className=\"send-message-form\"\r\n                onSubmit={this.handleSubmit}\r\n            >\r\n                <input\r\n                    disabled={this.props.disabled}\r\n                    placeholder=\"type your message here and press ENTER\"\r\n                    type=\"text\"\r\n                    name=\"textMessage\"\r\n                    value={this.state.textMessage}\r\n                    onChange={this.handleChange}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SendMessageForm","import React from 'react'\r\n\r\nclass NewRoomForm extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            roomName: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            roomName: event.target.value\r\n        })\r\n    }\r\n    handleSubmit(event) {\r\n        event.preventDefault()\r\n        this.props.createRoom(this.state.roomName)\r\n        this.setState({roomName: ''})\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"new-room-form\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        value={this.state.roomName}\r\n                        onChange={this.handleChange}\r\n                        type=\"text\" \r\n                        placeholder=\"Create a room\" \r\n                        required />\r\n                    <button id=\"create-room-btn\" type=\"submit\">+</button>\r\n            </form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewRoomForm","import React, { Component } from 'react';\nimport './App.css';\nimport RoomList from './components/RoomList'\nimport MessageList from './components/MessageList'\nimport SendMessageForm from './components/SendMessageForm'\nimport NewRoomForm from './components/NewRoomForm'\nimport { tokenUrl, instanceLocator } from './config'\nimport ChatKit from '@pusher/chatkit-client'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      roomId: null,\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: [],\n    }\n    this.sendMessage = this.sendMessage.bind(this)\n    this.subscribeToRoom = this.subscribeToRoom.bind(this)\n    this.getRooms = this.getRooms.bind(this)\n    this.createRoom = this.createRoom.bind(this)\n  }\n\n  componentDidMount() {\n    const chatManager = new ChatKit.ChatManager({\n      instanceLocator,\n      userId: 'abdallah',\n      tokenProvider: new ChatKit.TokenProvider({\n        url: tokenUrl\n      })\n\n    })\n\n    chatManager.connect()\n      .then(currentUser => {\n        this.currentUser = currentUser\n        this.getRooms()\n      })\n      .catch(err => console.log('error on joinableRooms: ', err))\n    \n  }\n\n  getRooms() {\n    this.currentUser.getJoinableRooms()\n          .then(joinableRooms =>{\n            this.setState({\n              joinableRooms,\n              joinedRooms: this.currentUser.rooms\n            })\n          })\n        .catch(err => console.log('error on joinableRooms: ', err))\n  }\n\n  subscribeToRoom(roomId) {\n    this.setState({\n      messages: []\n    })\n    this.currentUser.subscribeToRoom({\n      roomId: roomId,\n      messageLimit: 20,\n      hooks: {\n        onMessage: message => {\n          // console.log(\"Received message:\", message.text)\n          this.setState({\n            messages: [...this.state.messages, message]\n          })\n        }\n      }\n    })\n    .then(room => {\n      this.setState({\n        roomId: room.id\n      })\n      this.getRooms()\n    })\n    .catch(err => console.log('error on subscribing to room: ',err))\n  }\n  \n\n  sendMessage(text) {\n    this.currentUser.sendMessage({\n      text: text,\n      roomId: this.state.roomId\n    })\n  }\n\n  createRoom(name) {\n    this.currentUser.createRoom({\n      name\n    })\n    .then(room => this.subscribeToRoom(room.id))\n    .catch(err => console.log(\"error on createRoom\",err))\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <RoomList roomId={this.state.roomId}subscribeToRoom={this.subscribeToRoom} rooms={[...this.state.joinableRooms,...this.state.joinedRooms]}/>\n        <MessageList \n          messages={this.state.messages}\n          roomId={this.state.roomId}\n        />\n        <SendMessageForm \n          sendMessage={this.sendMessage}\n          disabled={!this.state.roomId}\n        />\n        <NewRoomForm createRoom={this.createRoom}/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const tokenUrl = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/a781f6d8-0b24-4595-9747-1f433a69991b/token\"\r\nconst instanceLocator = \"v1:us1:a781f6d8-0b24-4595-9747-1f433a69991b\"\r\n\r\nexport {tokenUrl, instanceLocator}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}